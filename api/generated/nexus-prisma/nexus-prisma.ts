/**
 * This file was automatically generated by nexus-prisma@0.3.5
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      JournalClub: JournalClubObject
      CoreCompetency: CoreCompetencyObject
      OverallCompetency: OverallCompetencyObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      JournalClubConnection: JournalClubConnectionObject
      JournalClubEdge: JournalClubEdgeObject
      AggregateJournalClub: AggregateJournalClubObject
      CoreCompetencyConnection: CoreCompetencyConnectionObject
      CoreCompetencyEdge: CoreCompetencyEdgeObject
      AggregateCoreCompetency: AggregateCoreCompetencyObject
      OverallCompetencyConnection: OverallCompetencyConnectionObject
      OverallCompetencyEdge: OverallCompetencyEdgeObject
      AggregateOverallCompetency: AggregateOverallCompetencyObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      JournalClubSubscriptionPayload: JournalClubSubscriptionPayloadObject
      JournalClubPreviousValues: JournalClubPreviousValuesObject
      CoreCompetencySubscriptionPayload: CoreCompetencySubscriptionPayloadObject
      CoreCompetencyPreviousValues: CoreCompetencyPreviousValuesObject
      OverallCompetencySubscriptionPayload: OverallCompetencySubscriptionPayloadObject
      OverallCompetencyPreviousValues: OverallCompetencyPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      JournalClub: JournalClubFieldDetails
      CoreCompetency: CoreCompetencyFieldDetails
      OverallCompetency: OverallCompetencyFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      JournalClubConnection: JournalClubConnectionFieldDetails
      JournalClubEdge: JournalClubEdgeFieldDetails
      AggregateJournalClub: AggregateJournalClubFieldDetails
      CoreCompetencyConnection: CoreCompetencyConnectionFieldDetails
      CoreCompetencyEdge: CoreCompetencyEdgeFieldDetails
      AggregateCoreCompetency: AggregateCoreCompetencyFieldDetails
      OverallCompetencyConnection: OverallCompetencyConnectionFieldDetails
      OverallCompetencyEdge: OverallCompetencyEdgeFieldDetails
      AggregateOverallCompetency: AggregateOverallCompetencyFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      JournalClubSubscriptionPayload: JournalClubSubscriptionPayloadFieldDetails
      JournalClubPreviousValues: JournalClubPreviousValuesFieldDetails
      CoreCompetencySubscriptionPayload: CoreCompetencySubscriptionPayloadFieldDetails
      CoreCompetencyPreviousValues: CoreCompetencyPreviousValuesFieldDetails
      OverallCompetencySubscriptionPayload: OverallCompetencySubscriptionPayloadFieldDetails
      OverallCompetencyPreviousValues: OverallCompetencyPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      JournalClubWhereInput: JournalClubWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      CoreCompetencyWhereInput: CoreCompetencyWhereInputInputObject
      OverallCompetencyWhereInput: OverallCompetencyWhereInputInputObject
      JournalClubWhereUniqueInput: JournalClubWhereUniqueInputInputObject
      CoreCompetencyWhereUniqueInput: CoreCompetencyWhereUniqueInputInputObject
      OverallCompetencyWhereUniqueInput: OverallCompetencyWhereUniqueInputInputObject
      UserCreateInput: UserCreateInputInputObject
      JournalClubCreateManyWithoutEvaluatorInput: JournalClubCreateManyWithoutEvaluatorInputInputObject
      JournalClubCreateWithoutEvaluatorInput: JournalClubCreateWithoutEvaluatorInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      UserCreateOneWithoutAssignedJournalClubsInput: UserCreateOneWithoutAssignedJournalClubsInputInputObject
      UserCreateWithoutAssignedJournalClubsInput: UserCreateWithoutAssignedJournalClubsInputInputObject
      CoreCompetencyCreateOneInput: CoreCompetencyCreateOneInputInputObject
      CoreCompetencyCreateInput: CoreCompetencyCreateInputInputObject
      OverallCompetencyCreateOneInput: OverallCompetencyCreateOneInputInputObject
      OverallCompetencyCreateInput: OverallCompetencyCreateInputInputObject
      JournalClubCreateManyWithoutPreceptorInput: JournalClubCreateManyWithoutPreceptorInputInputObject
      JournalClubCreateWithoutPreceptorInput: JournalClubCreateWithoutPreceptorInputInputObject
      UserCreateOneWithoutJournalClubsInput: UserCreateOneWithoutJournalClubsInputInputObject
      UserCreateWithoutJournalClubsInput: UserCreateWithoutJournalClubsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      JournalClubUpdateManyWithoutEvaluatorInput: JournalClubUpdateManyWithoutEvaluatorInputInputObject
      JournalClubUpdateWithWhereUniqueWithoutEvaluatorInput: JournalClubUpdateWithWhereUniqueWithoutEvaluatorInputInputObject
      JournalClubUpdateWithoutEvaluatorDataInput: JournalClubUpdateWithoutEvaluatorDataInputInputObject
      UserUpdateOneRequiredInput: UserUpdateOneRequiredInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      JournalClubUpdateManyWithoutPreceptorInput: JournalClubUpdateManyWithoutPreceptorInputInputObject
      JournalClubUpdateWithWhereUniqueWithoutPreceptorInput: JournalClubUpdateWithWhereUniqueWithoutPreceptorInputInputObject
      JournalClubUpdateWithoutPreceptorDataInput: JournalClubUpdateWithoutPreceptorDataInputInputObject
      UserUpdateOneRequiredWithoutJournalClubsInput: UserUpdateOneRequiredWithoutJournalClubsInputInputObject
      UserUpdateWithoutJournalClubsDataInput: UserUpdateWithoutJournalClubsDataInputInputObject
      UserUpsertWithoutJournalClubsInput: UserUpsertWithoutJournalClubsInputInputObject
      CoreCompetencyUpdateOneRequiredInput: CoreCompetencyUpdateOneRequiredInputInputObject
      CoreCompetencyUpdateDataInput: CoreCompetencyUpdateDataInputInputObject
      CoreCompetencyUpsertNestedInput: CoreCompetencyUpsertNestedInputInputObject
      OverallCompetencyUpdateOneRequiredInput: OverallCompetencyUpdateOneRequiredInputInputObject
      OverallCompetencyUpdateDataInput: OverallCompetencyUpdateDataInputInputObject
      OverallCompetencyUpsertNestedInput: OverallCompetencyUpsertNestedInputInputObject
      JournalClubUpsertWithWhereUniqueWithoutPreceptorInput: JournalClubUpsertWithWhereUniqueWithoutPreceptorInputInputObject
      JournalClubScalarWhereInput: JournalClubScalarWhereInputInputObject
      JournalClubUpdateManyWithWhereNestedInput: JournalClubUpdateManyWithWhereNestedInputInputObject
      JournalClubUpdateManyDataInput: JournalClubUpdateManyDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      UserUpdateOneRequiredWithoutAssignedJournalClubsInput: UserUpdateOneRequiredWithoutAssignedJournalClubsInputInputObject
      UserUpdateWithoutAssignedJournalClubsDataInput: UserUpdateWithoutAssignedJournalClubsDataInputInputObject
      UserUpsertWithoutAssignedJournalClubsInput: UserUpsertWithoutAssignedJournalClubsInputInputObject
      JournalClubUpsertWithWhereUniqueWithoutEvaluatorInput: JournalClubUpsertWithWhereUniqueWithoutEvaluatorInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      JournalClubCreateInput: JournalClubCreateInputInputObject
      JournalClubUpdateInput: JournalClubUpdateInputInputObject
      JournalClubUpdateManyMutationInput: JournalClubUpdateManyMutationInputInputObject
      CoreCompetencyUpdateInput: CoreCompetencyUpdateInputInputObject
      CoreCompetencyUpdateManyMutationInput: CoreCompetencyUpdateManyMutationInputInputObject
      OverallCompetencyUpdateInput: OverallCompetencyUpdateInputInputObject
      OverallCompetencyUpdateManyMutationInput: OverallCompetencyUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      JournalClubSubscriptionWhereInput: JournalClubSubscriptionWhereInputInputObject
      CoreCompetencySubscriptionWhereInput: CoreCompetencySubscriptionWhereInputInputObject
      OverallCompetencySubscriptionWhereInput: OverallCompetencySubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Position: PositionValues,
    Core: CoreValues,
    Overall: OverallValues,
    JournalClubOrderByInput: JournalClubOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    CoreCompetencyOrderByInput: CoreCompetencyOrderByInputValues,
    OverallCompetencyOrderByInput: OverallCompetencyOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'journalClub', args?: QueryJournalClubArgs[] | false, alias?: string  } 
  | { name: 'journalClubs', args?: QueryJournalClubsArgs[] | false, alias?: string  } 
  | { name: 'journalClubsConnection', args?: QueryJournalClubsConnectionArgs[] | false, alias?: string  } 
  | { name: 'coreCompetency', args?: QueryCoreCompetencyArgs[] | false, alias?: string  } 
  | { name: 'coreCompetencies', args?: QueryCoreCompetenciesArgs[] | false, alias?: string  } 
  | { name: 'coreCompetenciesConnection', args?: QueryCoreCompetenciesConnectionArgs[] | false, alias?: string  } 
  | { name: 'overallCompetency', args?: QueryOverallCompetencyArgs[] | false, alias?: string  } 
  | { name: 'overallCompetencies', args?: QueryOverallCompetenciesArgs[] | false, alias?: string  } 
  | { name: 'overallCompetenciesConnection', args?: QueryOverallCompetenciesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'journalClub'
  | 'journalClubs'
  | 'journalClubsConnection'
  | 'coreCompetency'
  | 'coreCompetencies'
  | 'coreCompetenciesConnection'
  | 'overallCompetency'
  | 'overallCompetencies'
  | 'overallCompetenciesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryJournalClubArgs =
  | 'where'
type QueryJournalClubsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryJournalClubsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCoreCompetencyArgs =
  | 'where'
type QueryCoreCompetenciesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCoreCompetenciesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOverallCompetencyArgs =
  | 'where'
type QueryOverallCompetenciesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOverallCompetenciesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  journalClub: {
    type: 'JournalClub'
    args: Record<QueryJournalClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: JournalClubWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub | null> | prisma.JournalClub | null
  }
  journalClubs: {
    type: 'JournalClub'
    args: Record<QueryJournalClubsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: JournalClubWhereInput | null, orderBy?: prisma.JournalClubOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub[]> | prisma.JournalClub[]
  }
  journalClubsConnection: {
    type: 'JournalClubConnection'
    args: Record<QueryJournalClubsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: JournalClubWhereInput | null, orderBy?: prisma.JournalClubOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClubConnection> | prisma.JournalClubConnection
  }
  coreCompetency: {
    type: 'CoreCompetency'
    args: Record<QueryCoreCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CoreCompetencyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency | null> | prisma.CoreCompetency | null
  }
  coreCompetencies: {
    type: 'CoreCompetency'
    args: Record<QueryCoreCompetenciesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CoreCompetencyWhereInput | null, orderBy?: prisma.CoreCompetencyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency[]> | prisma.CoreCompetency[]
  }
  coreCompetenciesConnection: {
    type: 'CoreCompetencyConnection'
    args: Record<QueryCoreCompetenciesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CoreCompetencyWhereInput | null, orderBy?: prisma.CoreCompetencyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetencyConnection> | prisma.CoreCompetencyConnection
  }
  overallCompetency: {
    type: 'OverallCompetency'
    args: Record<QueryOverallCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OverallCompetencyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency | null> | prisma.OverallCompetency | null
  }
  overallCompetencies: {
    type: 'OverallCompetency'
    args: Record<QueryOverallCompetenciesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OverallCompetencyWhereInput | null, orderBy?: prisma.OverallCompetencyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency[]> | prisma.OverallCompetency[]
  }
  overallCompetenciesConnection: {
    type: 'OverallCompetencyConnection'
    args: Record<QueryOverallCompetenciesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OverallCompetencyWhereInput | null, orderBy?: prisma.OverallCompetencyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetencyConnection> | prisma.OverallCompetencyConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'emailConfirmed', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'isOnline', args?: [] | false, alias?: string  } 
  | { name: 'journalClubs', args?: UserJournalClubsArgs[] | false, alias?: string  } 
  | { name: 'assignedJournalClubs', args?: UserAssignedJournalClubsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'firstName'
  | 'lastName'
  | 'email'
  | 'emailConfirmed'
  | 'password'
  | 'position'
  | 'isOnline'
  | 'journalClubs'
  | 'assignedJournalClubs'
  | 'createdAt'
  | 'updatedAt'


type UserJournalClubsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserAssignedJournalClubsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  emailConfirmed: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  position: {
    type: 'Position'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  isOnline: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  journalClubs: {
    type: 'JournalClub'
    args: Record<UserJournalClubsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: JournalClubWhereInput | null, orderBy?: prisma.JournalClubOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub[]> | prisma.JournalClub[]
  }
  assignedJournalClubs: {
    type: 'JournalClub'
    args: Record<UserAssignedJournalClubsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: JournalClubWhereInput | null, orderBy?: prisma.JournalClubOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub[]> | prisma.JournalClub[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for JournalClub

type JournalClubObject =
  | JournalClubFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'article', args?: [] | false, alias?: string  } 
  | { name: 'resident', args?: [] | false, alias?: string  } 
  | { name: 'evaluator', args?: [] | false, alias?: string  } 
  | { name: 'preceptor', args?: [] | false, alias?: string  } 
  | { name: 'background', args?: [] | false, alias?: string  } 
  | { name: 'methods', args?: [] | false, alias?: string  } 
  | { name: 'results', args?: [] | false, alias?: string  } 
  | { name: 'understanding', args?: [] | false, alias?: string  } 
  | { name: 'analysis', args?: [] | false, alias?: string  } 
  | { name: 'application', args?: [] | false, alias?: string  } 
  | { name: 'conclusions', args?: [] | false, alias?: string  } 
  | { name: 'clarity', args?: [] | false, alias?: string  } 
  | { name: 'organization', args?: [] | false, alias?: string  } 
  | { name: 'grammar', args?: [] | false, alias?: string  } 
  | { name: 'responseToQuestions', args?: [] | false, alias?: string  } 
  | { name: 'knowsAudience', args?: [] | false, alias?: string  } 
  | { name: 'audienceEngagement', args?: [] | false, alias?: string  } 
  | { name: 'overall', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type JournalClubFields =
  | 'id'
  | 'article'
  | 'resident'
  | 'evaluator'
  | 'preceptor'
  | 'background'
  | 'methods'
  | 'results'
  | 'understanding'
  | 'analysis'
  | 'application'
  | 'conclusions'
  | 'clarity'
  | 'organization'
  | 'grammar'
  | 'responseToQuestions'
  | 'knowsAudience'
  | 'audienceEngagement'
  | 'overall'
  | 'createdAt'
  | 'updatedAt'



  

export interface JournalClubFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  article: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  resident: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  evaluator: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  preceptor: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  background: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  methods: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  results: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  understanding: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  analysis: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  application: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  conclusions: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  clarity: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  organization: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  grammar: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  responseToQuestions: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  knowsAudience: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  audienceEngagement: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  overall: {
    type: 'OverallCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClub">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency> | prisma.OverallCompetency
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CoreCompetency

type CoreCompetencyObject =
  | CoreCompetencyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'competency', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type CoreCompetencyFields =
  | 'id'
  | 'competency'
  | 'comment'



  

export interface CoreCompetencyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  competency: {
    type: 'Core'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetency">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Core> | prisma.Core
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for OverallCompetency

type OverallCompetencyObject =
  | OverallCompetencyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'competency', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type OverallCompetencyFields =
  | 'id'
  | 'competency'
  | 'comment'



  

export interface OverallCompetencyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  competency: {
    type: 'Overall'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetency">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Overall> | prisma.Overall
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for JournalClubConnection

type JournalClubConnectionObject =
  | JournalClubConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type JournalClubConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface JournalClubConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClubConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'JournalClubEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClubConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClubEdge[]> | prisma.JournalClubEdge[]
  }
  aggregate: {
    type: 'AggregateJournalClub'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClubConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateJournalClub> | prisma.AggregateJournalClub
  }
}
  

// Types for JournalClubEdge

type JournalClubEdgeObject =
  | JournalClubEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type JournalClubEdgeFields =
  | 'node'
  | 'cursor'



  

export interface JournalClubEdgeFieldDetails {
  node: {
    type: 'JournalClub'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClubEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub> | prisma.JournalClub
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateJournalClub

type AggregateJournalClubObject =
  | AggregateJournalClubFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateJournalClubFields =
  | 'count'



  

export interface AggregateJournalClubFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CoreCompetencyConnection

type CoreCompetencyConnectionObject =
  | CoreCompetencyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CoreCompetencyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CoreCompetencyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetencyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CoreCompetencyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetencyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetencyEdge[]> | prisma.CoreCompetencyEdge[]
  }
  aggregate: {
    type: 'AggregateCoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetencyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCoreCompetency> | prisma.AggregateCoreCompetency
  }
}
  

// Types for CoreCompetencyEdge

type CoreCompetencyEdgeObject =
  | CoreCompetencyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CoreCompetencyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CoreCompetencyEdgeFieldDetails {
  node: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetencyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCoreCompetency

type AggregateCoreCompetencyObject =
  | AggregateCoreCompetencyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCoreCompetencyFields =
  | 'count'



  

export interface AggregateCoreCompetencyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OverallCompetencyConnection

type OverallCompetencyConnectionObject =
  | OverallCompetencyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OverallCompetencyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OverallCompetencyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetencyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OverallCompetencyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetencyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetencyEdge[]> | prisma.OverallCompetencyEdge[]
  }
  aggregate: {
    type: 'AggregateOverallCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetencyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOverallCompetency> | prisma.AggregateOverallCompetency
  }
}
  

// Types for OverallCompetencyEdge

type OverallCompetencyEdgeObject =
  | OverallCompetencyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OverallCompetencyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OverallCompetencyEdgeFieldDetails {
  node: {
    type: 'OverallCompetency'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetencyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency> | prisma.OverallCompetency
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOverallCompetency

type AggregateOverallCompetencyObject =
  | AggregateOverallCompetencyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOverallCompetencyFields =
  | 'count'



  

export interface AggregateOverallCompetencyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createJournalClub', args?: MutationCreateJournalClubArgs[] | false, alias?: string  } 
  | { name: 'updateJournalClub', args?: MutationUpdateJournalClubArgs[] | false, alias?: string  } 
  | { name: 'updateManyJournalClubs', args?: MutationUpdateManyJournalClubsArgs[] | false, alias?: string  } 
  | { name: 'upsertJournalClub', args?: MutationUpsertJournalClubArgs[] | false, alias?: string  } 
  | { name: 'deleteJournalClub', args?: MutationDeleteJournalClubArgs[] | false, alias?: string  } 
  | { name: 'deleteManyJournalClubs', args?: MutationDeleteManyJournalClubsArgs[] | false, alias?: string  } 
  | { name: 'createCoreCompetency', args?: MutationCreateCoreCompetencyArgs[] | false, alias?: string  } 
  | { name: 'updateCoreCompetency', args?: MutationUpdateCoreCompetencyArgs[] | false, alias?: string  } 
  | { name: 'updateManyCoreCompetencies', args?: MutationUpdateManyCoreCompetenciesArgs[] | false, alias?: string  } 
  | { name: 'upsertCoreCompetency', args?: MutationUpsertCoreCompetencyArgs[] | false, alias?: string  } 
  | { name: 'deleteCoreCompetency', args?: MutationDeleteCoreCompetencyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCoreCompetencies', args?: MutationDeleteManyCoreCompetenciesArgs[] | false, alias?: string  } 
  | { name: 'createOverallCompetency', args?: MutationCreateOverallCompetencyArgs[] | false, alias?: string  } 
  | { name: 'updateOverallCompetency', args?: MutationUpdateOverallCompetencyArgs[] | false, alias?: string  } 
  | { name: 'updateManyOverallCompetencies', args?: MutationUpdateManyOverallCompetenciesArgs[] | false, alias?: string  } 
  | { name: 'upsertOverallCompetency', args?: MutationUpsertOverallCompetencyArgs[] | false, alias?: string  } 
  | { name: 'deleteOverallCompetency', args?: MutationDeleteOverallCompetencyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOverallCompetencies', args?: MutationDeleteManyOverallCompetenciesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createJournalClub'
  | 'updateJournalClub'
  | 'updateManyJournalClubs'
  | 'upsertJournalClub'
  | 'deleteJournalClub'
  | 'deleteManyJournalClubs'
  | 'createCoreCompetency'
  | 'updateCoreCompetency'
  | 'updateManyCoreCompetencies'
  | 'upsertCoreCompetency'
  | 'deleteCoreCompetency'
  | 'deleteManyCoreCompetencies'
  | 'createOverallCompetency'
  | 'updateOverallCompetency'
  | 'updateManyOverallCompetencies'
  | 'upsertOverallCompetency'
  | 'deleteOverallCompetency'
  | 'deleteManyOverallCompetencies'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateJournalClubArgs =
  | 'data'
type MutationUpdateJournalClubArgs =
  | 'data'
  | 'where'
type MutationUpdateManyJournalClubsArgs =
  | 'data'
  | 'where'
type MutationUpsertJournalClubArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteJournalClubArgs =
  | 'where'
type MutationDeleteManyJournalClubsArgs =
  | 'where'
type MutationCreateCoreCompetencyArgs =
  | 'data'
type MutationUpdateCoreCompetencyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCoreCompetenciesArgs =
  | 'data'
  | 'where'
type MutationUpsertCoreCompetencyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCoreCompetencyArgs =
  | 'where'
type MutationDeleteManyCoreCompetenciesArgs =
  | 'where'
type MutationCreateOverallCompetencyArgs =
  | 'data'
type MutationUpdateOverallCompetencyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOverallCompetenciesArgs =
  | 'data'
  | 'where'
type MutationUpsertOverallCompetencyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOverallCompetencyArgs =
  | 'where'
type MutationDeleteManyOverallCompetenciesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createJournalClub: {
    type: 'JournalClub'
    args: Record<MutationCreateJournalClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: JournalClubCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub> | prisma.JournalClub
  }
  updateJournalClub: {
    type: 'JournalClub'
    args: Record<MutationUpdateJournalClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: JournalClubUpdateInput, where: JournalClubWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub | null> | prisma.JournalClub | null
  }
  updateManyJournalClubs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyJournalClubsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: JournalClubUpdateManyMutationInput, where?: JournalClubWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertJournalClub: {
    type: 'JournalClub'
    args: Record<MutationUpsertJournalClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: JournalClubWhereUniqueInput, create: JournalClubCreateInput, update: JournalClubUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub> | prisma.JournalClub
  }
  deleteJournalClub: {
    type: 'JournalClub'
    args: Record<MutationDeleteJournalClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: JournalClubWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub | null> | prisma.JournalClub | null
  }
  deleteManyJournalClubs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyJournalClubsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: JournalClubWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCoreCompetency: {
    type: 'CoreCompetency'
    args: Record<MutationCreateCoreCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CoreCompetencyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  updateCoreCompetency: {
    type: 'CoreCompetency'
    args: Record<MutationUpdateCoreCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CoreCompetencyUpdateInput, where: CoreCompetencyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency | null> | prisma.CoreCompetency | null
  }
  updateManyCoreCompetencies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCoreCompetenciesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CoreCompetencyUpdateManyMutationInput, where?: CoreCompetencyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCoreCompetency: {
    type: 'CoreCompetency'
    args: Record<MutationUpsertCoreCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CoreCompetencyWhereUniqueInput, create: CoreCompetencyCreateInput, update: CoreCompetencyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency> | prisma.CoreCompetency
  }
  deleteCoreCompetency: {
    type: 'CoreCompetency'
    args: Record<MutationDeleteCoreCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CoreCompetencyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency | null> | prisma.CoreCompetency | null
  }
  deleteManyCoreCompetencies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCoreCompetenciesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CoreCompetencyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOverallCompetency: {
    type: 'OverallCompetency'
    args: Record<MutationCreateOverallCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OverallCompetencyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency> | prisma.OverallCompetency
  }
  updateOverallCompetency: {
    type: 'OverallCompetency'
    args: Record<MutationUpdateOverallCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OverallCompetencyUpdateInput, where: OverallCompetencyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency | null> | prisma.OverallCompetency | null
  }
  updateManyOverallCompetencies: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOverallCompetenciesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OverallCompetencyUpdateManyMutationInput, where?: OverallCompetencyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOverallCompetency: {
    type: 'OverallCompetency'
    args: Record<MutationUpsertOverallCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OverallCompetencyWhereUniqueInput, create: OverallCompetencyCreateInput, update: OverallCompetencyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency> | prisma.OverallCompetency
  }
  deleteOverallCompetency: {
    type: 'OverallCompetency'
    args: Record<MutationDeleteOverallCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OverallCompetencyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency | null> | prisma.OverallCompetency | null
  }
  deleteManyOverallCompetencies: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOverallCompetenciesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OverallCompetencyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'journalClub', args?: SubscriptionJournalClubArgs[] | false, alias?: string  } 
  | { name: 'coreCompetency', args?: SubscriptionCoreCompetencyArgs[] | false, alias?: string  } 
  | { name: 'overallCompetency', args?: SubscriptionOverallCompetencyArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'journalClub'
  | 'coreCompetency'
  | 'overallCompetency'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionJournalClubArgs =
  | 'where'
type SubscriptionCoreCompetencyArgs =
  | 'where'
type SubscriptionOverallCompetencyArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  journalClub: {
    type: 'JournalClubSubscriptionPayload'
    args: Record<SubscriptionJournalClubArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: JournalClubSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClubSubscriptionPayload | null> | prisma.JournalClubSubscriptionPayload | null
  }
  coreCompetency: {
    type: 'CoreCompetencySubscriptionPayload'
    args: Record<SubscriptionCoreCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CoreCompetencySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetencySubscriptionPayload | null> | prisma.CoreCompetencySubscriptionPayload | null
  }
  overallCompetency: {
    type: 'OverallCompetencySubscriptionPayload'
    args: Record<SubscriptionOverallCompetencyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OverallCompetencySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetencySubscriptionPayload | null> | prisma.OverallCompetencySubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'emailConfirmed', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'isOnline', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'firstName'
  | 'lastName'
  | 'email'
  | 'emailConfirmed'
  | 'password'
  | 'position'
  | 'isOnline'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  emailConfirmed: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  position: {
    type: 'Position'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Position> | prisma.Position
  }
  isOnline: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for JournalClubSubscriptionPayload

type JournalClubSubscriptionPayloadObject =
  | JournalClubSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type JournalClubSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface JournalClubSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"JournalClubSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'JournalClub'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"JournalClubSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClub | null> | prisma.JournalClub | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'JournalClubPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"JournalClubSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.JournalClubPreviousValues | null> | prisma.JournalClubPreviousValues | null
  }
}
  

// Types for JournalClubPreviousValues

type JournalClubPreviousValuesObject =
  | JournalClubPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'article', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type JournalClubPreviousValuesFields =
  | 'id'
  | 'article'
  | 'createdAt'
  | 'updatedAt'



  

export interface JournalClubPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  article: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CoreCompetencySubscriptionPayload

type CoreCompetencySubscriptionPayloadObject =
  | CoreCompetencySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CoreCompetencySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CoreCompetencySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetencySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CoreCompetency'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CoreCompetencySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetency | null> | prisma.CoreCompetency | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CoreCompetencyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CoreCompetencySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CoreCompetencyPreviousValues | null> | prisma.CoreCompetencyPreviousValues | null
  }
}
  

// Types for CoreCompetencyPreviousValues

type CoreCompetencyPreviousValuesObject =
  | CoreCompetencyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'competency', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type CoreCompetencyPreviousValuesFields =
  | 'id'
  | 'competency'
  | 'comment'



  

export interface CoreCompetencyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  competency: {
    type: 'Core'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CoreCompetencyPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Core> | prisma.Core
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for OverallCompetencySubscriptionPayload

type OverallCompetencySubscriptionPayloadObject =
  | OverallCompetencySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OverallCompetencySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OverallCompetencySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetencySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'OverallCompetency'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OverallCompetencySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetency | null> | prisma.OverallCompetency | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OverallCompetencyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OverallCompetencySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OverallCompetencyPreviousValues | null> | prisma.OverallCompetencyPreviousValues | null
  }
}
  

// Types for OverallCompetencyPreviousValues

type OverallCompetencyPreviousValuesObject =
  | OverallCompetencyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'competency', args?: [] | false, alias?: string  } 
  | { name: 'comment', args?: [] | false, alias?: string  } 

type OverallCompetencyPreviousValuesFields =
  | 'id'
  | 'competency'
  | 'comment'



  

export interface OverallCompetencyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  competency: {
    type: 'Overall'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OverallCompetencyPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Overall> | prisma.Overall
  }
  comment: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface JournalClubWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  article?: string | null
  article_not?: string | null
  article_in?: string[]
  article_not_in?: string[]
  article_lt?: string | null
  article_lte?: string | null
  article_gt?: string | null
  article_gte?: string | null
  article_contains?: string | null
  article_not_contains?: string | null
  article_starts_with?: string | null
  article_not_starts_with?: string | null
  article_ends_with?: string | null
  article_not_ends_with?: string | null
  resident?: UserWhereInput | null
  evaluator?: UserWhereInput | null
  preceptor?: UserWhereInput | null
  background?: CoreCompetencyWhereInput | null
  methods?: CoreCompetencyWhereInput | null
  results?: CoreCompetencyWhereInput | null
  understanding?: CoreCompetencyWhereInput | null
  analysis?: CoreCompetencyWhereInput | null
  application?: CoreCompetencyWhereInput | null
  conclusions?: CoreCompetencyWhereInput | null
  clarity?: CoreCompetencyWhereInput | null
  organization?: CoreCompetencyWhereInput | null
  grammar?: CoreCompetencyWhereInput | null
  responseToQuestions?: CoreCompetencyWhereInput | null
  knowsAudience?: CoreCompetencyWhereInput | null
  audienceEngagement?: CoreCompetencyWhereInput | null
  overall?: OverallCompetencyWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: JournalClubWhereInput[]
  OR?: JournalClubWhereInput[]
  NOT?: JournalClubWhereInput[]
}
export type JournalClubWhereInputInputObject =
  | Extract<keyof JournalClubWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'article', alias?: string  } 
  | { name: 'article_not', alias?: string  } 
  | { name: 'article_in', alias?: string  } 
  | { name: 'article_not_in', alias?: string  } 
  | { name: 'article_lt', alias?: string  } 
  | { name: 'article_lte', alias?: string  } 
  | { name: 'article_gt', alias?: string  } 
  | { name: 'article_gte', alias?: string  } 
  | { name: 'article_contains', alias?: string  } 
  | { name: 'article_not_contains', alias?: string  } 
  | { name: 'article_starts_with', alias?: string  } 
  | { name: 'article_not_starts_with', alias?: string  } 
  | { name: 'article_ends_with', alias?: string  } 
  | { name: 'article_not_ends_with', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'evaluator', alias?: string  } 
  | { name: 'preceptor', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  emailConfirmed?: boolean | null
  emailConfirmed_not?: boolean | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  position?: prisma.Position | null
  position_not?: prisma.Position | null
  position_in?: prisma.Position[]
  position_not_in?: prisma.Position[]
  isOnline?: boolean | null
  isOnline_not?: boolean | null
  journalClubs_every?: JournalClubWhereInput | null
  journalClubs_some?: JournalClubWhereInput | null
  journalClubs_none?: JournalClubWhereInput | null
  assignedJournalClubs_every?: JournalClubWhereInput | null
  assignedJournalClubs_some?: JournalClubWhereInput | null
  assignedJournalClubs_none?: JournalClubWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'emailConfirmed_not', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'isOnline_not', alias?: string  } 
  | { name: 'journalClubs_every', alias?: string  } 
  | { name: 'journalClubs_some', alias?: string  } 
  | { name: 'journalClubs_none', alias?: string  } 
  | { name: 'assignedJournalClubs_every', alias?: string  } 
  | { name: 'assignedJournalClubs_some', alias?: string  } 
  | { name: 'assignedJournalClubs_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CoreCompetencyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  competency?: prisma.Core | null
  competency_not?: prisma.Core | null
  competency_in?: prisma.Core[]
  competency_not_in?: prisma.Core[]
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  AND?: CoreCompetencyWhereInput[]
  OR?: CoreCompetencyWhereInput[]
  NOT?: CoreCompetencyWhereInput[]
}
export type CoreCompetencyWhereInputInputObject =
  | Extract<keyof CoreCompetencyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'competency', alias?: string  } 
  | { name: 'competency_not', alias?: string  } 
  | { name: 'competency_in', alias?: string  } 
  | { name: 'competency_not_in', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OverallCompetencyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  competency?: prisma.Overall | null
  competency_not?: prisma.Overall | null
  competency_in?: prisma.Overall[]
  competency_not_in?: prisma.Overall[]
  comment?: string | null
  comment_not?: string | null
  comment_in?: string[]
  comment_not_in?: string[]
  comment_lt?: string | null
  comment_lte?: string | null
  comment_gt?: string | null
  comment_gte?: string | null
  comment_contains?: string | null
  comment_not_contains?: string | null
  comment_starts_with?: string | null
  comment_not_starts_with?: string | null
  comment_ends_with?: string | null
  comment_not_ends_with?: string | null
  AND?: OverallCompetencyWhereInput[]
  OR?: OverallCompetencyWhereInput[]
  NOT?: OverallCompetencyWhereInput[]
}
export type OverallCompetencyWhereInputInputObject =
  | Extract<keyof OverallCompetencyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'competency', alias?: string  } 
  | { name: 'competency_not', alias?: string  } 
  | { name: 'competency_in', alias?: string  } 
  | { name: 'competency_not_in', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  | { name: 'comment_not', alias?: string  } 
  | { name: 'comment_in', alias?: string  } 
  | { name: 'comment_not_in', alias?: string  } 
  | { name: 'comment_lt', alias?: string  } 
  | { name: 'comment_lte', alias?: string  } 
  | { name: 'comment_gt', alias?: string  } 
  | { name: 'comment_gte', alias?: string  } 
  | { name: 'comment_contains', alias?: string  } 
  | { name: 'comment_not_contains', alias?: string  } 
  | { name: 'comment_starts_with', alias?: string  } 
  | { name: 'comment_not_starts_with', alias?: string  } 
  | { name: 'comment_ends_with', alias?: string  } 
  | { name: 'comment_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface JournalClubWhereUniqueInput {
  id?: string | null
}
export type JournalClubWhereUniqueInputInputObject =
  | Extract<keyof JournalClubWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CoreCompetencyWhereUniqueInput {
  id?: string | null
}
export type CoreCompetencyWhereUniqueInputInputObject =
  | Extract<keyof CoreCompetencyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OverallCompetencyWhereUniqueInput {
  id?: string | null
}
export type OverallCompetencyWhereUniqueInputInputObject =
  | Extract<keyof OverallCompetencyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserCreateInput {
  firstName?: string
  lastName?: string
  email?: string
  emailConfirmed?: boolean | null
  password?: string
  position?: prisma.Position
  isOnline?: boolean | null
  journalClubs?: JournalClubCreateManyWithoutEvaluatorInput | null
  assignedJournalClubs?: JournalClubCreateManyWithoutPreceptorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'journalClubs', alias?: string  } 
  | { name: 'assignedJournalClubs', alias?: string  } 
  
export interface JournalClubCreateManyWithoutEvaluatorInput {
  create?: JournalClubCreateWithoutEvaluatorInput[]
  connect?: JournalClubWhereUniqueInput[]
}
export type JournalClubCreateManyWithoutEvaluatorInputInputObject =
  | Extract<keyof JournalClubCreateManyWithoutEvaluatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface JournalClubCreateWithoutEvaluatorInput {
  article?: string
  resident?: UserCreateOneInput
  preceptor?: UserCreateOneWithoutAssignedJournalClubsInput
  background?: CoreCompetencyCreateOneInput
  methods?: CoreCompetencyCreateOneInput
  results?: CoreCompetencyCreateOneInput
  understanding?: CoreCompetencyCreateOneInput
  analysis?: CoreCompetencyCreateOneInput
  application?: CoreCompetencyCreateOneInput
  conclusions?: CoreCompetencyCreateOneInput
  clarity?: CoreCompetencyCreateOneInput
  organization?: CoreCompetencyCreateOneInput
  grammar?: CoreCompetencyCreateOneInput
  responseToQuestions?: CoreCompetencyCreateOneInput
  knowsAudience?: CoreCompetencyCreateOneInput
  audienceEngagement?: CoreCompetencyCreateOneInput
  overall?: OverallCompetencyCreateOneInput
}
export type JournalClubCreateWithoutEvaluatorInputInputObject =
  | Extract<keyof JournalClubCreateWithoutEvaluatorInput, string>
  | { name: 'article', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'preceptor', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateOneWithoutAssignedJournalClubsInput {
  create?: UserCreateWithoutAssignedJournalClubsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutAssignedJournalClubsInputInputObject =
  | Extract<keyof UserCreateOneWithoutAssignedJournalClubsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAssignedJournalClubsInput {
  firstName?: string
  lastName?: string
  email?: string
  emailConfirmed?: boolean | null
  password?: string
  position?: prisma.Position
  isOnline?: boolean | null
  journalClubs?: JournalClubCreateManyWithoutEvaluatorInput | null
}
export type UserCreateWithoutAssignedJournalClubsInputInputObject =
  | Extract<keyof UserCreateWithoutAssignedJournalClubsInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'journalClubs', alias?: string  } 
  
export interface CoreCompetencyCreateOneInput {
  create?: CoreCompetencyCreateInput | null
  connect?: CoreCompetencyWhereUniqueInput | null
}
export type CoreCompetencyCreateOneInputInputObject =
  | Extract<keyof CoreCompetencyCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CoreCompetencyCreateInput {
  competency?: prisma.Core
  comment?: string | null
}
export type CoreCompetencyCreateInputInputObject =
  | Extract<keyof CoreCompetencyCreateInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface OverallCompetencyCreateOneInput {
  create?: OverallCompetencyCreateInput | null
  connect?: OverallCompetencyWhereUniqueInput | null
}
export type OverallCompetencyCreateOneInputInputObject =
  | Extract<keyof OverallCompetencyCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OverallCompetencyCreateInput {
  competency?: prisma.Overall
  comment?: string | null
}
export type OverallCompetencyCreateInputInputObject =
  | Extract<keyof OverallCompetencyCreateInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface JournalClubCreateManyWithoutPreceptorInput {
  create?: JournalClubCreateWithoutPreceptorInput[]
  connect?: JournalClubWhereUniqueInput[]
}
export type JournalClubCreateManyWithoutPreceptorInputInputObject =
  | Extract<keyof JournalClubCreateManyWithoutPreceptorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface JournalClubCreateWithoutPreceptorInput {
  article?: string
  resident?: UserCreateOneInput
  evaluator?: UserCreateOneWithoutJournalClubsInput
  background?: CoreCompetencyCreateOneInput
  methods?: CoreCompetencyCreateOneInput
  results?: CoreCompetencyCreateOneInput
  understanding?: CoreCompetencyCreateOneInput
  analysis?: CoreCompetencyCreateOneInput
  application?: CoreCompetencyCreateOneInput
  conclusions?: CoreCompetencyCreateOneInput
  clarity?: CoreCompetencyCreateOneInput
  organization?: CoreCompetencyCreateOneInput
  grammar?: CoreCompetencyCreateOneInput
  responseToQuestions?: CoreCompetencyCreateOneInput
  knowsAudience?: CoreCompetencyCreateOneInput
  audienceEngagement?: CoreCompetencyCreateOneInput
  overall?: OverallCompetencyCreateOneInput
}
export type JournalClubCreateWithoutPreceptorInputInputObject =
  | Extract<keyof JournalClubCreateWithoutPreceptorInput, string>
  | { name: 'article', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'evaluator', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  
export interface UserCreateOneWithoutJournalClubsInput {
  create?: UserCreateWithoutJournalClubsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutJournalClubsInputInputObject =
  | Extract<keyof UserCreateOneWithoutJournalClubsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutJournalClubsInput {
  firstName?: string
  lastName?: string
  email?: string
  emailConfirmed?: boolean | null
  password?: string
  position?: prisma.Position
  isOnline?: boolean | null
  assignedJournalClubs?: JournalClubCreateManyWithoutPreceptorInput | null
}
export type UserCreateWithoutJournalClubsInputInputObject =
  | Extract<keyof UserCreateWithoutJournalClubsInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'assignedJournalClubs', alias?: string  } 
  
export interface UserUpdateInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  emailConfirmed?: boolean | null
  password?: string | null
  position?: prisma.Position | null
  isOnline?: boolean | null
  journalClubs?: JournalClubUpdateManyWithoutEvaluatorInput | null
  assignedJournalClubs?: JournalClubUpdateManyWithoutPreceptorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'journalClubs', alias?: string  } 
  | { name: 'assignedJournalClubs', alias?: string  } 
  
export interface JournalClubUpdateManyWithoutEvaluatorInput {
  create?: JournalClubCreateWithoutEvaluatorInput[]
  delete?: JournalClubWhereUniqueInput[]
  connect?: JournalClubWhereUniqueInput[]
  set?: JournalClubWhereUniqueInput[]
  disconnect?: JournalClubWhereUniqueInput[]
  update?: JournalClubUpdateWithWhereUniqueWithoutEvaluatorInput[]
  upsert?: JournalClubUpsertWithWhereUniqueWithoutEvaluatorInput[]
  deleteMany?: JournalClubScalarWhereInput[]
  updateMany?: JournalClubUpdateManyWithWhereNestedInput[]
}
export type JournalClubUpdateManyWithoutEvaluatorInputInputObject =
  | Extract<keyof JournalClubUpdateManyWithoutEvaluatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface JournalClubUpdateWithWhereUniqueWithoutEvaluatorInput {
  where?: JournalClubWhereUniqueInput
  data?: JournalClubUpdateWithoutEvaluatorDataInput
}
export type JournalClubUpdateWithWhereUniqueWithoutEvaluatorInputInputObject =
  | Extract<keyof JournalClubUpdateWithWhereUniqueWithoutEvaluatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface JournalClubUpdateWithoutEvaluatorDataInput {
  article?: string | null
  resident?: UserUpdateOneRequiredInput | null
  preceptor?: UserUpdateOneRequiredWithoutAssignedJournalClubsInput | null
  background?: CoreCompetencyUpdateOneRequiredInput | null
  methods?: CoreCompetencyUpdateOneRequiredInput | null
  results?: CoreCompetencyUpdateOneRequiredInput | null
  understanding?: CoreCompetencyUpdateOneRequiredInput | null
  analysis?: CoreCompetencyUpdateOneRequiredInput | null
  application?: CoreCompetencyUpdateOneRequiredInput | null
  conclusions?: CoreCompetencyUpdateOneRequiredInput | null
  clarity?: CoreCompetencyUpdateOneRequiredInput | null
  organization?: CoreCompetencyUpdateOneRequiredInput | null
  grammar?: CoreCompetencyUpdateOneRequiredInput | null
  responseToQuestions?: CoreCompetencyUpdateOneRequiredInput | null
  knowsAudience?: CoreCompetencyUpdateOneRequiredInput | null
  audienceEngagement?: CoreCompetencyUpdateOneRequiredInput | null
  overall?: OverallCompetencyUpdateOneRequiredInput | null
}
export type JournalClubUpdateWithoutEvaluatorDataInputInputObject =
  | Extract<keyof JournalClubUpdateWithoutEvaluatorDataInput, string>
  | { name: 'article', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'preceptor', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  
export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredInputInputObject =
  | Extract<keyof UserUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  emailConfirmed?: boolean | null
  password?: string | null
  position?: prisma.Position | null
  isOnline?: boolean | null
  journalClubs?: JournalClubUpdateManyWithoutEvaluatorInput | null
  assignedJournalClubs?: JournalClubUpdateManyWithoutPreceptorInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'journalClubs', alias?: string  } 
  | { name: 'assignedJournalClubs', alias?: string  } 
  
export interface JournalClubUpdateManyWithoutPreceptorInput {
  create?: JournalClubCreateWithoutPreceptorInput[]
  delete?: JournalClubWhereUniqueInput[]
  connect?: JournalClubWhereUniqueInput[]
  set?: JournalClubWhereUniqueInput[]
  disconnect?: JournalClubWhereUniqueInput[]
  update?: JournalClubUpdateWithWhereUniqueWithoutPreceptorInput[]
  upsert?: JournalClubUpsertWithWhereUniqueWithoutPreceptorInput[]
  deleteMany?: JournalClubScalarWhereInput[]
  updateMany?: JournalClubUpdateManyWithWhereNestedInput[]
}
export type JournalClubUpdateManyWithoutPreceptorInputInputObject =
  | Extract<keyof JournalClubUpdateManyWithoutPreceptorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface JournalClubUpdateWithWhereUniqueWithoutPreceptorInput {
  where?: JournalClubWhereUniqueInput
  data?: JournalClubUpdateWithoutPreceptorDataInput
}
export type JournalClubUpdateWithWhereUniqueWithoutPreceptorInputInputObject =
  | Extract<keyof JournalClubUpdateWithWhereUniqueWithoutPreceptorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface JournalClubUpdateWithoutPreceptorDataInput {
  article?: string | null
  resident?: UserUpdateOneRequiredInput | null
  evaluator?: UserUpdateOneRequiredWithoutJournalClubsInput | null
  background?: CoreCompetencyUpdateOneRequiredInput | null
  methods?: CoreCompetencyUpdateOneRequiredInput | null
  results?: CoreCompetencyUpdateOneRequiredInput | null
  understanding?: CoreCompetencyUpdateOneRequiredInput | null
  analysis?: CoreCompetencyUpdateOneRequiredInput | null
  application?: CoreCompetencyUpdateOneRequiredInput | null
  conclusions?: CoreCompetencyUpdateOneRequiredInput | null
  clarity?: CoreCompetencyUpdateOneRequiredInput | null
  organization?: CoreCompetencyUpdateOneRequiredInput | null
  grammar?: CoreCompetencyUpdateOneRequiredInput | null
  responseToQuestions?: CoreCompetencyUpdateOneRequiredInput | null
  knowsAudience?: CoreCompetencyUpdateOneRequiredInput | null
  audienceEngagement?: CoreCompetencyUpdateOneRequiredInput | null
  overall?: OverallCompetencyUpdateOneRequiredInput | null
}
export type JournalClubUpdateWithoutPreceptorDataInputInputObject =
  | Extract<keyof JournalClubUpdateWithoutPreceptorDataInput, string>
  | { name: 'article', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'evaluator', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutJournalClubsInput {
  create?: UserCreateWithoutJournalClubsInput | null
  update?: UserUpdateWithoutJournalClubsDataInput | null
  upsert?: UserUpsertWithoutJournalClubsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutJournalClubsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutJournalClubsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutJournalClubsDataInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  emailConfirmed?: boolean | null
  password?: string | null
  position?: prisma.Position | null
  isOnline?: boolean | null
  assignedJournalClubs?: JournalClubUpdateManyWithoutPreceptorInput | null
}
export type UserUpdateWithoutJournalClubsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutJournalClubsDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'assignedJournalClubs', alias?: string  } 
  
export interface UserUpsertWithoutJournalClubsInput {
  update?: UserUpdateWithoutJournalClubsDataInput
  create?: UserCreateWithoutJournalClubsInput
}
export type UserUpsertWithoutJournalClubsInputInputObject =
  | Extract<keyof UserUpsertWithoutJournalClubsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CoreCompetencyUpdateOneRequiredInput {
  create?: CoreCompetencyCreateInput | null
  update?: CoreCompetencyUpdateDataInput | null
  upsert?: CoreCompetencyUpsertNestedInput | null
  connect?: CoreCompetencyWhereUniqueInput | null
}
export type CoreCompetencyUpdateOneRequiredInputInputObject =
  | Extract<keyof CoreCompetencyUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CoreCompetencyUpdateDataInput {
  competency?: prisma.Core | null
  comment?: string | null
}
export type CoreCompetencyUpdateDataInputInputObject =
  | Extract<keyof CoreCompetencyUpdateDataInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CoreCompetencyUpsertNestedInput {
  update?: CoreCompetencyUpdateDataInput
  create?: CoreCompetencyCreateInput
}
export type CoreCompetencyUpsertNestedInputInputObject =
  | Extract<keyof CoreCompetencyUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OverallCompetencyUpdateOneRequiredInput {
  create?: OverallCompetencyCreateInput | null
  update?: OverallCompetencyUpdateDataInput | null
  upsert?: OverallCompetencyUpsertNestedInput | null
  connect?: OverallCompetencyWhereUniqueInput | null
}
export type OverallCompetencyUpdateOneRequiredInputInputObject =
  | Extract<keyof OverallCompetencyUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OverallCompetencyUpdateDataInput {
  competency?: prisma.Overall | null
  comment?: string | null
}
export type OverallCompetencyUpdateDataInputInputObject =
  | Extract<keyof OverallCompetencyUpdateDataInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface OverallCompetencyUpsertNestedInput {
  update?: OverallCompetencyUpdateDataInput
  create?: OverallCompetencyCreateInput
}
export type OverallCompetencyUpsertNestedInputInputObject =
  | Extract<keyof OverallCompetencyUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface JournalClubUpsertWithWhereUniqueWithoutPreceptorInput {
  where?: JournalClubWhereUniqueInput
  update?: JournalClubUpdateWithoutPreceptorDataInput
  create?: JournalClubCreateWithoutPreceptorInput
}
export type JournalClubUpsertWithWhereUniqueWithoutPreceptorInputInputObject =
  | Extract<keyof JournalClubUpsertWithWhereUniqueWithoutPreceptorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface JournalClubScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  article?: string | null
  article_not?: string | null
  article_in?: string[]
  article_not_in?: string[]
  article_lt?: string | null
  article_lte?: string | null
  article_gt?: string | null
  article_gte?: string | null
  article_contains?: string | null
  article_not_contains?: string | null
  article_starts_with?: string | null
  article_not_starts_with?: string | null
  article_ends_with?: string | null
  article_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: JournalClubScalarWhereInput[]
  OR?: JournalClubScalarWhereInput[]
  NOT?: JournalClubScalarWhereInput[]
}
export type JournalClubScalarWhereInputInputObject =
  | Extract<keyof JournalClubScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'article', alias?: string  } 
  | { name: 'article_not', alias?: string  } 
  | { name: 'article_in', alias?: string  } 
  | { name: 'article_not_in', alias?: string  } 
  | { name: 'article_lt', alias?: string  } 
  | { name: 'article_lte', alias?: string  } 
  | { name: 'article_gt', alias?: string  } 
  | { name: 'article_gte', alias?: string  } 
  | { name: 'article_contains', alias?: string  } 
  | { name: 'article_not_contains', alias?: string  } 
  | { name: 'article_starts_with', alias?: string  } 
  | { name: 'article_not_starts_with', alias?: string  } 
  | { name: 'article_ends_with', alias?: string  } 
  | { name: 'article_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface JournalClubUpdateManyWithWhereNestedInput {
  where?: JournalClubScalarWhereInput
  data?: JournalClubUpdateManyDataInput
}
export type JournalClubUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof JournalClubUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface JournalClubUpdateManyDataInput {
  article?: string | null
}
export type JournalClubUpdateManyDataInputInputObject =
  | Extract<keyof JournalClubUpdateManyDataInput, string>
  | { name: 'article', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutAssignedJournalClubsInput {
  create?: UserCreateWithoutAssignedJournalClubsInput | null
  update?: UserUpdateWithoutAssignedJournalClubsDataInput | null
  upsert?: UserUpsertWithoutAssignedJournalClubsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutAssignedJournalClubsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutAssignedJournalClubsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutAssignedJournalClubsDataInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  emailConfirmed?: boolean | null
  password?: string | null
  position?: prisma.Position | null
  isOnline?: boolean | null
  journalClubs?: JournalClubUpdateManyWithoutEvaluatorInput | null
}
export type UserUpdateWithoutAssignedJournalClubsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAssignedJournalClubsDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  | { name: 'journalClubs', alias?: string  } 
  
export interface UserUpsertWithoutAssignedJournalClubsInput {
  update?: UserUpdateWithoutAssignedJournalClubsDataInput
  create?: UserCreateWithoutAssignedJournalClubsInput
}
export type UserUpsertWithoutAssignedJournalClubsInputInputObject =
  | Extract<keyof UserUpsertWithoutAssignedJournalClubsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface JournalClubUpsertWithWhereUniqueWithoutEvaluatorInput {
  where?: JournalClubWhereUniqueInput
  update?: JournalClubUpdateWithoutEvaluatorDataInput
  create?: JournalClubCreateWithoutEvaluatorInput
}
export type JournalClubUpsertWithWhereUniqueWithoutEvaluatorInputInputObject =
  | Extract<keyof JournalClubUpsertWithWhereUniqueWithoutEvaluatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  firstName?: string | null
  lastName?: string | null
  email?: string | null
  emailConfirmed?: boolean | null
  password?: string | null
  position?: prisma.Position | null
  isOnline?: boolean | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'emailConfirmed', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'isOnline', alias?: string  } 
  
export interface JournalClubCreateInput {
  article?: string
  resident?: UserCreateOneInput
  evaluator?: UserCreateOneWithoutJournalClubsInput
  preceptor?: UserCreateOneWithoutAssignedJournalClubsInput
  background?: CoreCompetencyCreateOneInput
  methods?: CoreCompetencyCreateOneInput
  results?: CoreCompetencyCreateOneInput
  understanding?: CoreCompetencyCreateOneInput
  analysis?: CoreCompetencyCreateOneInput
  application?: CoreCompetencyCreateOneInput
  conclusions?: CoreCompetencyCreateOneInput
  clarity?: CoreCompetencyCreateOneInput
  organization?: CoreCompetencyCreateOneInput
  grammar?: CoreCompetencyCreateOneInput
  responseToQuestions?: CoreCompetencyCreateOneInput
  knowsAudience?: CoreCompetencyCreateOneInput
  audienceEngagement?: CoreCompetencyCreateOneInput
  overall?: OverallCompetencyCreateOneInput
}
export type JournalClubCreateInputInputObject =
  | Extract<keyof JournalClubCreateInput, string>
  | { name: 'article', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'evaluator', alias?: string  } 
  | { name: 'preceptor', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  
export interface JournalClubUpdateInput {
  article?: string | null
  resident?: UserUpdateOneRequiredInput | null
  evaluator?: UserUpdateOneRequiredWithoutJournalClubsInput | null
  preceptor?: UserUpdateOneRequiredWithoutAssignedJournalClubsInput | null
  background?: CoreCompetencyUpdateOneRequiredInput | null
  methods?: CoreCompetencyUpdateOneRequiredInput | null
  results?: CoreCompetencyUpdateOneRequiredInput | null
  understanding?: CoreCompetencyUpdateOneRequiredInput | null
  analysis?: CoreCompetencyUpdateOneRequiredInput | null
  application?: CoreCompetencyUpdateOneRequiredInput | null
  conclusions?: CoreCompetencyUpdateOneRequiredInput | null
  clarity?: CoreCompetencyUpdateOneRequiredInput | null
  organization?: CoreCompetencyUpdateOneRequiredInput | null
  grammar?: CoreCompetencyUpdateOneRequiredInput | null
  responseToQuestions?: CoreCompetencyUpdateOneRequiredInput | null
  knowsAudience?: CoreCompetencyUpdateOneRequiredInput | null
  audienceEngagement?: CoreCompetencyUpdateOneRequiredInput | null
  overall?: OverallCompetencyUpdateOneRequiredInput | null
}
export type JournalClubUpdateInputInputObject =
  | Extract<keyof JournalClubUpdateInput, string>
  | { name: 'article', alias?: string  } 
  | { name: 'resident', alias?: string  } 
  | { name: 'evaluator', alias?: string  } 
  | { name: 'preceptor', alias?: string  } 
  | { name: 'background', alias?: string  } 
  | { name: 'methods', alias?: string  } 
  | { name: 'results', alias?: string  } 
  | { name: 'understanding', alias?: string  } 
  | { name: 'analysis', alias?: string  } 
  | { name: 'application', alias?: string  } 
  | { name: 'conclusions', alias?: string  } 
  | { name: 'clarity', alias?: string  } 
  | { name: 'organization', alias?: string  } 
  | { name: 'grammar', alias?: string  } 
  | { name: 'responseToQuestions', alias?: string  } 
  | { name: 'knowsAudience', alias?: string  } 
  | { name: 'audienceEngagement', alias?: string  } 
  | { name: 'overall', alias?: string  } 
  
export interface JournalClubUpdateManyMutationInput {
  article?: string | null
}
export type JournalClubUpdateManyMutationInputInputObject =
  | Extract<keyof JournalClubUpdateManyMutationInput, string>
  | { name: 'article', alias?: string  } 
  
export interface CoreCompetencyUpdateInput {
  competency?: prisma.Core | null
  comment?: string | null
}
export type CoreCompetencyUpdateInputInputObject =
  | Extract<keyof CoreCompetencyUpdateInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface CoreCompetencyUpdateManyMutationInput {
  competency?: prisma.Core | null
  comment?: string | null
}
export type CoreCompetencyUpdateManyMutationInputInputObject =
  | Extract<keyof CoreCompetencyUpdateManyMutationInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface OverallCompetencyUpdateInput {
  competency?: prisma.Overall | null
  comment?: string | null
}
export type OverallCompetencyUpdateInputInputObject =
  | Extract<keyof OverallCompetencyUpdateInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface OverallCompetencyUpdateManyMutationInput {
  competency?: prisma.Overall | null
  comment?: string | null
}
export type OverallCompetencyUpdateManyMutationInputInputObject =
  | Extract<keyof OverallCompetencyUpdateManyMutationInput, string>
  | { name: 'competency', alias?: string  } 
  | { name: 'comment', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface JournalClubSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: JournalClubWhereInput | null
  AND?: JournalClubSubscriptionWhereInput[]
  OR?: JournalClubSubscriptionWhereInput[]
  NOT?: JournalClubSubscriptionWhereInput[]
}
export type JournalClubSubscriptionWhereInputInputObject =
  | Extract<keyof JournalClubSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CoreCompetencySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CoreCompetencyWhereInput | null
  AND?: CoreCompetencySubscriptionWhereInput[]
  OR?: CoreCompetencySubscriptionWhereInput[]
  NOT?: CoreCompetencySubscriptionWhereInput[]
}
export type CoreCompetencySubscriptionWhereInputInputObject =
  | Extract<keyof CoreCompetencySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OverallCompetencySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OverallCompetencyWhereInput | null
  AND?: OverallCompetencySubscriptionWhereInput[]
  OR?: OverallCompetencySubscriptionWhereInput[]
  NOT?: OverallCompetencySubscriptionWhereInput[]
}
export type OverallCompetencySubscriptionWhereInputInputObject =
  | Extract<keyof OverallCompetencySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type PositionValues =
  | 'PHARMACIST'
  | 'RESIDENT'
  
export type CoreValues =
  | 'NEEDS_IMPROVEMENT'
  | 'SATISFACTORY_PROGRESS'
  | 'ACHIEVED'
  | 'NOT_APPLICABLE'
  
export type OverallValues =
  | 'MEETS_EXPECTATIONS'
  | 'DOES_NOT_MEET_EXPECTATIONS'
  
export type JournalClubOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'article_ASC'
  | 'article_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'emailConfirmed_ASC'
  | 'emailConfirmed_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'position_ASC'
  | 'position_DESC'
  | 'isOnline_ASC'
  | 'isOnline_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CoreCompetencyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'competency_ASC'
  | 'competency_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OverallCompetencyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'competency_ASC'
  | 'competency_DESC'
  | 'comment_ASC'
  | 'comment_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  