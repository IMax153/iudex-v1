type User {
  id: ID! @unique
  firstName: String!
  lastName: String!
  email: String! @unique
  emailConfirmed: Boolean! @default(value: false)
  password: String!
  position: Position!
  isOnline: Boolean! @default(value: false)
  journalClubs: [JournalClub!]! @relation(name: "UserJournalClubs", onDelete: CASCADE)
  assignedJournalClubs: [JournalClub!]! @relation(name: "PreceptorJournalClubs", onDelete: CASCADE)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type JournalClub {
  id: ID! @unique
  article: String!
  resident: User! @relation(name: "JournalClubResident", onDelete: CASCADE)
  evaluator: User! @relation(name: "UserJournalClubs", onDelete: CASCADE)
  preceptor: User! @relation(name: "PreceptorJournalClubs", onDelete: CASCADE)
  background: CoreCompetency! @relation(name: "JournalClubBackground", onDelete: CASCADE)
  methods: CoreCompetency! @relation(name: "JournalClubMethods", onDelete: CASCADE)
  results: CoreCompetency! @relation(name: "JournalClubResults", onDelete: CASCADE)
  understanding: CoreCompetency! @relation(name: "JournalClubUnderstanding", onDelete: CASCADE)
  analysis: CoreCompetency! @relation(name: "JournalClubAnalysis", onDelete: CASCADE)
  application: CoreCompetency! @relation(name: "JournalClubApplication", onDelete: CASCADE)
  conclusions: CoreCompetency! @relation(name: "JournalClubConclusions", onDelete: CASCADE)
  clarity: CoreCompetency! @relation(name: "JournalClubClarity", onDelete: CASCADE)
  organization: CoreCompetency! @relation(name: "JournalClubOrganization", onDelete: CASCADE)
  grammar: CoreCompetency! @relation(name: "JournalClubGrammar", onDelete: CASCADE)
  responseToQuestions: CoreCompetency!
    @relation(name: "JournalClubResponseToQuestions", onDelete: CASCADE)
  knowsAudience: CoreCompetency! @relation(name: "JournalClubKnowsAudience", onDelete: CASCADE)
  audienceEngagement: CoreCompetency!
    @relation(name: "JournalClubAudienceEngagement", onDelete: CASCADE)
  overall: OverallCompetency! @relation(name: "JournalClubOverall", onDelete: CASCADE)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoreCompetency {
  id: ID! @unique
  competency: Core!
  comment: String
}

type OverallCompetency {
  id: ID! @unique
  competency: Overall!
  comment: String
}

enum Position {
  PHARMACIST
  RESIDENT
}

enum Core {
  NEEDS_IMPROVEMENT
  SATISFACTORY_PROGRESS
  ACHIEVED
  NOT_APPLICABLE
}

enum Overall {
  MEETS_EXPECTATIONS
  DOES_NOT_MEET_EXPECTATIONS
}
