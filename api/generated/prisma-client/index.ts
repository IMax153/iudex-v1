// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  coreCompetency: (where?: CoreCompetencyWhereInput) => Promise<boolean>;
  journalClub: (where?: JournalClubWhereInput) => Promise<boolean>;
  overallCompetency: (where?: OverallCompetencyWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  coreCompetency: (
    where: CoreCompetencyWhereUniqueInput
  ) => CoreCompetencyPromise;
  coreCompetencies: (
    args?: {
      where?: CoreCompetencyWhereInput;
      orderBy?: CoreCompetencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CoreCompetency>;
  coreCompetenciesConnection: (
    args?: {
      where?: CoreCompetencyWhereInput;
      orderBy?: CoreCompetencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CoreCompetencyConnectionPromise;
  journalClub: (where: JournalClubWhereUniqueInput) => JournalClubPromise;
  journalClubs: (
    args?: {
      where?: JournalClubWhereInput;
      orderBy?: JournalClubOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<JournalClub>;
  journalClubsConnection: (
    args?: {
      where?: JournalClubWhereInput;
      orderBy?: JournalClubOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => JournalClubConnectionPromise;
  overallCompetency: (
    where: OverallCompetencyWhereUniqueInput
  ) => OverallCompetencyPromise;
  overallCompetencies: (
    args?: {
      where?: OverallCompetencyWhereInput;
      orderBy?: OverallCompetencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<OverallCompetency>;
  overallCompetenciesConnection: (
    args?: {
      where?: OverallCompetencyWhereInput;
      orderBy?: OverallCompetencyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => OverallCompetencyConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCoreCompetency: (
    data: CoreCompetencyCreateInput
  ) => CoreCompetencyPromise;
  updateCoreCompetency: (
    args: {
      data: CoreCompetencyUpdateInput;
      where: CoreCompetencyWhereUniqueInput;
    }
  ) => CoreCompetencyPromise;
  updateManyCoreCompetencies: (
    args: {
      data: CoreCompetencyUpdateManyMutationInput;
      where?: CoreCompetencyWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCoreCompetency: (
    args: {
      where: CoreCompetencyWhereUniqueInput;
      create: CoreCompetencyCreateInput;
      update: CoreCompetencyUpdateInput;
    }
  ) => CoreCompetencyPromise;
  deleteCoreCompetency: (
    where: CoreCompetencyWhereUniqueInput
  ) => CoreCompetencyPromise;
  deleteManyCoreCompetencies: (
    where?: CoreCompetencyWhereInput
  ) => BatchPayloadPromise;
  createJournalClub: (data: JournalClubCreateInput) => JournalClubPromise;
  updateJournalClub: (
    args: { data: JournalClubUpdateInput; where: JournalClubWhereUniqueInput }
  ) => JournalClubPromise;
  updateManyJournalClubs: (
    args: {
      data: JournalClubUpdateManyMutationInput;
      where?: JournalClubWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertJournalClub: (
    args: {
      where: JournalClubWhereUniqueInput;
      create: JournalClubCreateInput;
      update: JournalClubUpdateInput;
    }
  ) => JournalClubPromise;
  deleteJournalClub: (where: JournalClubWhereUniqueInput) => JournalClubPromise;
  deleteManyJournalClubs: (
    where?: JournalClubWhereInput
  ) => BatchPayloadPromise;
  createOverallCompetency: (
    data: OverallCompetencyCreateInput
  ) => OverallCompetencyPromise;
  updateOverallCompetency: (
    args: {
      data: OverallCompetencyUpdateInput;
      where: OverallCompetencyWhereUniqueInput;
    }
  ) => OverallCompetencyPromise;
  updateManyOverallCompetencies: (
    args: {
      data: OverallCompetencyUpdateManyMutationInput;
      where?: OverallCompetencyWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertOverallCompetency: (
    args: {
      where: OverallCompetencyWhereUniqueInput;
      create: OverallCompetencyCreateInput;
      update: OverallCompetencyUpdateInput;
    }
  ) => OverallCompetencyPromise;
  deleteOverallCompetency: (
    where: OverallCompetencyWhereUniqueInput
  ) => OverallCompetencyPromise;
  deleteManyOverallCompetencies: (
    where?: OverallCompetencyWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  coreCompetency: (
    where?: CoreCompetencySubscriptionWhereInput
  ) => CoreCompetencySubscriptionPayloadSubscription;
  journalClub: (
    where?: JournalClubSubscriptionWhereInput
  ) => JournalClubSubscriptionPayloadSubscription;
  overallCompetency: (
    where?: OverallCompetencySubscriptionWhereInput
  ) => OverallCompetencySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Core =
  | "NEEDS_IMPROVEMENT"
  | "SATISFACTORY_PROGRESS"
  | "ACHIEVED"
  | "NOT_APPLICABLE";

export type CoreCompetencyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "competency_ASC"
  | "competency_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Position = "PRECEPTOR" | "RESIDENT";

export type Overall = "MEETS_EXPECTATIONS" | "DOES_NOT_MEET_EXPECTATIONS";

export type JournalClubOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "article_ASC"
  | "article_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OverallCompetencyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "competency_ASC"
  | "competency_DESC"
  | "comment_ASC"
  | "comment_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "facebookProviderId_ASC"
  | "facebookProviderId_DESC"
  | "googleProviderId_ASC"
  | "googleProviderId_DESC"
  | "twitterProviderId_ASC"
  | "twitterProviderId_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "position_ASC"
  | "position_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CoreCompetencyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CoreCompetencyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  competency?: Core;
  competency_not?: Core;
  competency_in?: Core[] | Core;
  competency_not_in?: Core[] | Core;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  AND?: CoreCompetencyWhereInput[] | CoreCompetencyWhereInput;
  OR?: CoreCompetencyWhereInput[] | CoreCompetencyWhereInput;
  NOT?: CoreCompetencyWhereInput[] | CoreCompetencyWhereInput;
}

export type JournalClubWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface JournalClubWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  article?: String;
  article_not?: String;
  article_in?: String[] | String;
  article_not_in?: String[] | String;
  article_lt?: String;
  article_lte?: String;
  article_gt?: String;
  article_gte?: String;
  article_contains?: String;
  article_not_contains?: String;
  article_starts_with?: String;
  article_not_starts_with?: String;
  article_ends_with?: String;
  article_not_ends_with?: String;
  resident?: UserWhereInput;
  evaluator?: UserWhereInput;
  preceptor?: UserWhereInput;
  background?: CoreCompetencyWhereInput;
  methods?: CoreCompetencyWhereInput;
  results?: CoreCompetencyWhereInput;
  understanding?: CoreCompetencyWhereInput;
  analysis?: CoreCompetencyWhereInput;
  application?: CoreCompetencyWhereInput;
  conclusions?: CoreCompetencyWhereInput;
  clarity?: CoreCompetencyWhereInput;
  organization?: CoreCompetencyWhereInput;
  grammar?: CoreCompetencyWhereInput;
  responseToQuestions?: CoreCompetencyWhereInput;
  knowsAudience?: CoreCompetencyWhereInput;
  audienceEngagement?: CoreCompetencyWhereInput;
  overall?: OverallCompetencyWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: JournalClubWhereInput[] | JournalClubWhereInput;
  OR?: JournalClubWhereInput[] | JournalClubWhereInput;
  NOT?: JournalClubWhereInput[] | JournalClubWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  facebookProviderId?: String;
  facebookProviderId_not?: String;
  facebookProviderId_in?: String[] | String;
  facebookProviderId_not_in?: String[] | String;
  facebookProviderId_lt?: String;
  facebookProviderId_lte?: String;
  facebookProviderId_gt?: String;
  facebookProviderId_gte?: String;
  facebookProviderId_contains?: String;
  facebookProviderId_not_contains?: String;
  facebookProviderId_starts_with?: String;
  facebookProviderId_not_starts_with?: String;
  facebookProviderId_ends_with?: String;
  facebookProviderId_not_ends_with?: String;
  googleProviderId?: String;
  googleProviderId_not?: String;
  googleProviderId_in?: String[] | String;
  googleProviderId_not_in?: String[] | String;
  googleProviderId_lt?: String;
  googleProviderId_lte?: String;
  googleProviderId_gt?: String;
  googleProviderId_gte?: String;
  googleProviderId_contains?: String;
  googleProviderId_not_contains?: String;
  googleProviderId_starts_with?: String;
  googleProviderId_not_starts_with?: String;
  googleProviderId_ends_with?: String;
  googleProviderId_not_ends_with?: String;
  twitterProviderId?: String;
  twitterProviderId_not?: String;
  twitterProviderId_in?: String[] | String;
  twitterProviderId_not_in?: String[] | String;
  twitterProviderId_lt?: String;
  twitterProviderId_lte?: String;
  twitterProviderId_gt?: String;
  twitterProviderId_gte?: String;
  twitterProviderId_contains?: String;
  twitterProviderId_not_contains?: String;
  twitterProviderId_starts_with?: String;
  twitterProviderId_not_starts_with?: String;
  twitterProviderId_ends_with?: String;
  twitterProviderId_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  position?: Position;
  position_not?: Position;
  position_in?: Position[] | Position;
  position_not_in?: Position[] | Position;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface OverallCompetencyWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  competency?: Overall;
  competency_not?: Overall;
  competency_in?: Overall[] | Overall;
  competency_not_in?: Overall[] | Overall;
  comment?: String;
  comment_not?: String;
  comment_in?: String[] | String;
  comment_not_in?: String[] | String;
  comment_lt?: String;
  comment_lte?: String;
  comment_gt?: String;
  comment_gte?: String;
  comment_contains?: String;
  comment_not_contains?: String;
  comment_starts_with?: String;
  comment_not_starts_with?: String;
  comment_ends_with?: String;
  comment_not_ends_with?: String;
  AND?: OverallCompetencyWhereInput[] | OverallCompetencyWhereInput;
  OR?: OverallCompetencyWhereInput[] | OverallCompetencyWhereInput;
  NOT?: OverallCompetencyWhereInput[] | OverallCompetencyWhereInput;
}

export type OverallCompetencyWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  email?: String;
}>;

export interface CoreCompetencyCreateInput {
  id?: ID_Input;
  competency: Core;
  comment?: String;
}

export interface CoreCompetencyUpdateInput {
  competency?: Core;
  comment?: String;
}

export interface CoreCompetencyUpdateManyMutationInput {
  competency?: Core;
  comment?: String;
}

export interface JournalClubCreateInput {
  id?: ID_Input;
  article: String;
  resident: UserCreateOneInput;
  evaluator: UserCreateOneInput;
  preceptor: UserCreateOneInput;
  background: CoreCompetencyCreateOneInput;
  methods: CoreCompetencyCreateOneInput;
  results: CoreCompetencyCreateOneInput;
  understanding: CoreCompetencyCreateOneInput;
  analysis: CoreCompetencyCreateOneInput;
  application: CoreCompetencyCreateOneInput;
  conclusions: CoreCompetencyCreateOneInput;
  clarity: CoreCompetencyCreateOneInput;
  organization: CoreCompetencyCreateOneInput;
  grammar: CoreCompetencyCreateOneInput;
  responseToQuestions: CoreCompetencyCreateOneInput;
  knowsAudience: CoreCompetencyCreateOneInput;
  audienceEngagement: CoreCompetencyCreateOneInput;
  overall: OverallCompetencyCreateOneInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  firstName: String;
  lastName: String;
  email: String;
  position?: Position;
}

export interface CoreCompetencyCreateOneInput {
  create?: CoreCompetencyCreateInput;
  connect?: CoreCompetencyWhereUniqueInput;
}

export interface OverallCompetencyCreateOneInput {
  create?: OverallCompetencyCreateInput;
  connect?: OverallCompetencyWhereUniqueInput;
}

export interface OverallCompetencyCreateInput {
  id?: ID_Input;
  competency: Overall;
  comment?: String;
}

export interface JournalClubUpdateInput {
  article?: String;
  resident?: UserUpdateOneRequiredInput;
  evaluator?: UserUpdateOneRequiredInput;
  preceptor?: UserUpdateOneRequiredInput;
  background?: CoreCompetencyUpdateOneRequiredInput;
  methods?: CoreCompetencyUpdateOneRequiredInput;
  results?: CoreCompetencyUpdateOneRequiredInput;
  understanding?: CoreCompetencyUpdateOneRequiredInput;
  analysis?: CoreCompetencyUpdateOneRequiredInput;
  application?: CoreCompetencyUpdateOneRequiredInput;
  conclusions?: CoreCompetencyUpdateOneRequiredInput;
  clarity?: CoreCompetencyUpdateOneRequiredInput;
  organization?: CoreCompetencyUpdateOneRequiredInput;
  grammar?: CoreCompetencyUpdateOneRequiredInput;
  responseToQuestions?: CoreCompetencyUpdateOneRequiredInput;
  knowsAudience?: CoreCompetencyUpdateOneRequiredInput;
  audienceEngagement?: CoreCompetencyUpdateOneRequiredInput;
  overall?: OverallCompetencyUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  firstName?: String;
  lastName?: String;
  email?: String;
  position?: Position;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CoreCompetencyUpdateOneRequiredInput {
  create?: CoreCompetencyCreateInput;
  update?: CoreCompetencyUpdateDataInput;
  upsert?: CoreCompetencyUpsertNestedInput;
  connect?: CoreCompetencyWhereUniqueInput;
}

export interface CoreCompetencyUpdateDataInput {
  competency?: Core;
  comment?: String;
}

export interface CoreCompetencyUpsertNestedInput {
  update: CoreCompetencyUpdateDataInput;
  create: CoreCompetencyCreateInput;
}

export interface OverallCompetencyUpdateOneRequiredInput {
  create?: OverallCompetencyCreateInput;
  update?: OverallCompetencyUpdateDataInput;
  upsert?: OverallCompetencyUpsertNestedInput;
  connect?: OverallCompetencyWhereUniqueInput;
}

export interface OverallCompetencyUpdateDataInput {
  competency?: Overall;
  comment?: String;
}

export interface OverallCompetencyUpsertNestedInput {
  update: OverallCompetencyUpdateDataInput;
  create: OverallCompetencyCreateInput;
}

export interface JournalClubUpdateManyMutationInput {
  article?: String;
}

export interface OverallCompetencyUpdateInput {
  competency?: Overall;
  comment?: String;
}

export interface OverallCompetencyUpdateManyMutationInput {
  competency?: Overall;
  comment?: String;
}

export interface UserUpdateInput {
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  firstName?: String;
  lastName?: String;
  email?: String;
  position?: Position;
}

export interface UserUpdateManyMutationInput {
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  firstName?: String;
  lastName?: String;
  email?: String;
  position?: Position;
}

export interface CoreCompetencySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CoreCompetencyWhereInput;
  AND?:
    | CoreCompetencySubscriptionWhereInput[]
    | CoreCompetencySubscriptionWhereInput;
  OR?:
    | CoreCompetencySubscriptionWhereInput[]
    | CoreCompetencySubscriptionWhereInput;
  NOT?:
    | CoreCompetencySubscriptionWhereInput[]
    | CoreCompetencySubscriptionWhereInput;
}

export interface JournalClubSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JournalClubWhereInput;
  AND?: JournalClubSubscriptionWhereInput[] | JournalClubSubscriptionWhereInput;
  OR?: JournalClubSubscriptionWhereInput[] | JournalClubSubscriptionWhereInput;
  NOT?: JournalClubSubscriptionWhereInput[] | JournalClubSubscriptionWhereInput;
}

export interface OverallCompetencySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: OverallCompetencyWhereInput;
  AND?:
    | OverallCompetencySubscriptionWhereInput[]
    | OverallCompetencySubscriptionWhereInput;
  OR?:
    | OverallCompetencySubscriptionWhereInput[]
    | OverallCompetencySubscriptionWhereInput;
  NOT?:
    | OverallCompetencySubscriptionWhereInput[]
    | OverallCompetencySubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface CoreCompetency {
  id: ID_Output;
  competency: Core;
  comment?: String;
}

export interface CoreCompetencyPromise
  extends Promise<CoreCompetency>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  competency: () => Promise<Core>;
  comment: () => Promise<String>;
}

export interface CoreCompetencySubscription
  extends Promise<AsyncIterator<CoreCompetency>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  competency: () => Promise<AsyncIterator<Core>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface CoreCompetencyConnection {
  pageInfo: PageInfo;
  edges: CoreCompetencyEdge[];
}

export interface CoreCompetencyConnectionPromise
  extends Promise<CoreCompetencyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CoreCompetencyEdge>>() => T;
  aggregate: <T = AggregateCoreCompetencyPromise>() => T;
}

export interface CoreCompetencyConnectionSubscription
  extends Promise<AsyncIterator<CoreCompetencyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CoreCompetencyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCoreCompetencySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CoreCompetencyEdge {
  node: CoreCompetency;
  cursor: String;
}

export interface CoreCompetencyEdgePromise
  extends Promise<CoreCompetencyEdge>,
    Fragmentable {
  node: <T = CoreCompetencyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CoreCompetencyEdgeSubscription
  extends Promise<AsyncIterator<CoreCompetencyEdge>>,
    Fragmentable {
  node: <T = CoreCompetencySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCoreCompetency {
  count: Int;
}

export interface AggregateCoreCompetencyPromise
  extends Promise<AggregateCoreCompetency>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCoreCompetencySubscription
  extends Promise<AsyncIterator<AggregateCoreCompetency>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JournalClub {
  id: ID_Output;
  article: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface JournalClubPromise extends Promise<JournalClub>, Fragmentable {
  id: () => Promise<ID_Output>;
  article: () => Promise<String>;
  resident: <T = UserPromise>() => T;
  evaluator: <T = UserPromise>() => T;
  preceptor: <T = UserPromise>() => T;
  background: <T = CoreCompetencyPromise>() => T;
  methods: <T = CoreCompetencyPromise>() => T;
  results: <T = CoreCompetencyPromise>() => T;
  understanding: <T = CoreCompetencyPromise>() => T;
  analysis: <T = CoreCompetencyPromise>() => T;
  application: <T = CoreCompetencyPromise>() => T;
  conclusions: <T = CoreCompetencyPromise>() => T;
  clarity: <T = CoreCompetencyPromise>() => T;
  organization: <T = CoreCompetencyPromise>() => T;
  grammar: <T = CoreCompetencyPromise>() => T;
  responseToQuestions: <T = CoreCompetencyPromise>() => T;
  knowsAudience: <T = CoreCompetencyPromise>() => T;
  audienceEngagement: <T = CoreCompetencyPromise>() => T;
  overall: <T = OverallCompetencyPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface JournalClubSubscription
  extends Promise<AsyncIterator<JournalClub>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  article: () => Promise<AsyncIterator<String>>;
  resident: <T = UserSubscription>() => T;
  evaluator: <T = UserSubscription>() => T;
  preceptor: <T = UserSubscription>() => T;
  background: <T = CoreCompetencySubscription>() => T;
  methods: <T = CoreCompetencySubscription>() => T;
  results: <T = CoreCompetencySubscription>() => T;
  understanding: <T = CoreCompetencySubscription>() => T;
  analysis: <T = CoreCompetencySubscription>() => T;
  application: <T = CoreCompetencySubscription>() => T;
  conclusions: <T = CoreCompetencySubscription>() => T;
  clarity: <T = CoreCompetencySubscription>() => T;
  organization: <T = CoreCompetencySubscription>() => T;
  grammar: <T = CoreCompetencySubscription>() => T;
  responseToQuestions: <T = CoreCompetencySubscription>() => T;
  knowsAudience: <T = CoreCompetencySubscription>() => T;
  audienceEngagement: <T = CoreCompetencySubscription>() => T;
  overall: <T = OverallCompetencySubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  firstName: String;
  lastName: String;
  email: String;
  position?: Position;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  facebookProviderId: () => Promise<String>;
  googleProviderId: () => Promise<String>;
  twitterProviderId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  position: () => Promise<Position>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  facebookProviderId: () => Promise<AsyncIterator<String>>;
  googleProviderId: () => Promise<AsyncIterator<String>>;
  twitterProviderId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Position>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OverallCompetency {
  id: ID_Output;
  competency: Overall;
  comment?: String;
}

export interface OverallCompetencyPromise
  extends Promise<OverallCompetency>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  competency: () => Promise<Overall>;
  comment: () => Promise<String>;
}

export interface OverallCompetencySubscription
  extends Promise<AsyncIterator<OverallCompetency>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  competency: () => Promise<AsyncIterator<Overall>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface JournalClubConnection {
  pageInfo: PageInfo;
  edges: JournalClubEdge[];
}

export interface JournalClubConnectionPromise
  extends Promise<JournalClubConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JournalClubEdge>>() => T;
  aggregate: <T = AggregateJournalClubPromise>() => T;
}

export interface JournalClubConnectionSubscription
  extends Promise<AsyncIterator<JournalClubConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JournalClubEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJournalClubSubscription>() => T;
}

export interface JournalClubEdge {
  node: JournalClub;
  cursor: String;
}

export interface JournalClubEdgePromise
  extends Promise<JournalClubEdge>,
    Fragmentable {
  node: <T = JournalClubPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JournalClubEdgeSubscription
  extends Promise<AsyncIterator<JournalClubEdge>>,
    Fragmentable {
  node: <T = JournalClubSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJournalClub {
  count: Int;
}

export interface AggregateJournalClubPromise
  extends Promise<AggregateJournalClub>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJournalClubSubscription
  extends Promise<AsyncIterator<AggregateJournalClub>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OverallCompetencyConnection {
  pageInfo: PageInfo;
  edges: OverallCompetencyEdge[];
}

export interface OverallCompetencyConnectionPromise
  extends Promise<OverallCompetencyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OverallCompetencyEdge>>() => T;
  aggregate: <T = AggregateOverallCompetencyPromise>() => T;
}

export interface OverallCompetencyConnectionSubscription
  extends Promise<AsyncIterator<OverallCompetencyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OverallCompetencyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOverallCompetencySubscription>() => T;
}

export interface OverallCompetencyEdge {
  node: OverallCompetency;
  cursor: String;
}

export interface OverallCompetencyEdgePromise
  extends Promise<OverallCompetencyEdge>,
    Fragmentable {
  node: <T = OverallCompetencyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OverallCompetencyEdgeSubscription
  extends Promise<AsyncIterator<OverallCompetencyEdge>>,
    Fragmentable {
  node: <T = OverallCompetencySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOverallCompetency {
  count: Int;
}

export interface AggregateOverallCompetencyPromise
  extends Promise<AggregateOverallCompetency>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOverallCompetencySubscription
  extends Promise<AsyncIterator<AggregateOverallCompetency>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CoreCompetencySubscriptionPayload {
  mutation: MutationType;
  node: CoreCompetency;
  updatedFields: String[];
  previousValues: CoreCompetencyPreviousValues;
}

export interface CoreCompetencySubscriptionPayloadPromise
  extends Promise<CoreCompetencySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoreCompetencyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoreCompetencyPreviousValuesPromise>() => T;
}

export interface CoreCompetencySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CoreCompetencySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CoreCompetencySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoreCompetencyPreviousValuesSubscription>() => T;
}

export interface CoreCompetencyPreviousValues {
  id: ID_Output;
  competency: Core;
  comment?: String;
}

export interface CoreCompetencyPreviousValuesPromise
  extends Promise<CoreCompetencyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  competency: () => Promise<Core>;
  comment: () => Promise<String>;
}

export interface CoreCompetencyPreviousValuesSubscription
  extends Promise<AsyncIterator<CoreCompetencyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  competency: () => Promise<AsyncIterator<Core>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface JournalClubSubscriptionPayload {
  mutation: MutationType;
  node: JournalClub;
  updatedFields: String[];
  previousValues: JournalClubPreviousValues;
}

export interface JournalClubSubscriptionPayloadPromise
  extends Promise<JournalClubSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JournalClubPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JournalClubPreviousValuesPromise>() => T;
}

export interface JournalClubSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JournalClubSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JournalClubSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JournalClubPreviousValuesSubscription>() => T;
}

export interface JournalClubPreviousValues {
  id: ID_Output;
  article: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface JournalClubPreviousValuesPromise
  extends Promise<JournalClubPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  article: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface JournalClubPreviousValuesSubscription
  extends Promise<AsyncIterator<JournalClubPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  article: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OverallCompetencySubscriptionPayload {
  mutation: MutationType;
  node: OverallCompetency;
  updatedFields: String[];
  previousValues: OverallCompetencyPreviousValues;
}

export interface OverallCompetencySubscriptionPayloadPromise
  extends Promise<OverallCompetencySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OverallCompetencyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OverallCompetencyPreviousValuesPromise>() => T;
}

export interface OverallCompetencySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OverallCompetencySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OverallCompetencySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OverallCompetencyPreviousValuesSubscription>() => T;
}

export interface OverallCompetencyPreviousValues {
  id: ID_Output;
  competency: Overall;
  comment?: String;
}

export interface OverallCompetencyPreviousValuesPromise
  extends Promise<OverallCompetencyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  competency: () => Promise<Overall>;
  comment: () => Promise<String>;
}

export interface OverallCompetencyPreviousValuesSubscription
  extends Promise<AsyncIterator<OverallCompetencyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  competency: () => Promise<AsyncIterator<Overall>>;
  comment: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  facebookProviderId?: String;
  googleProviderId?: String;
  twitterProviderId?: String;
  firstName: String;
  lastName: String;
  email: String;
  position?: Position;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  facebookProviderId: () => Promise<String>;
  googleProviderId: () => Promise<String>;
  twitterProviderId: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  position: () => Promise<Position>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  facebookProviderId: () => Promise<AsyncIterator<String>>;
  googleProviderId: () => Promise<AsyncIterator<String>>;
  twitterProviderId: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<Position>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "JournalClub",
    embedded: false
  },
  {
    name: "CoreCompetency",
    embedded: false
  },
  {
    name: "OverallCompetency",
    embedded: false
  },
  {
    name: "Position",
    embedded: false
  },
  {
    name: "Core",
    embedded: false
  },
  {
    name: "Overall",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_MANAGEMENT_API_SECRET"]}`
});
export const prisma = new Prisma();
